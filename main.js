// ========================================
// üîß ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ
// ========================================

// ‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 2 ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
const SPREADSHEET_ID = '1MAj8VCJSx46Z1XYfvKpF7vm6Yr0gx3_c1KKbc57Hbfs'; // üìù ‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á Google Sheets ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const API_KEY = 'AIzaSyDxTCnWAV0-sS2EE7r7E7WIza3B9zVwfM0';           // üîë ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

// üìã ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ó‡πÉ‡∏ô Google Sheets (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
const SUMMARY_SHEET = 'A1:J7';                    // ‡∏ä‡∏µ‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
const BANK_SHEET = '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏≠‡∏î‡∏ú‡πâ‡∏≤‡∏õ‡πà‡∏≤‡∏Ø!B:D';         // ‡∏ä‡∏µ‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏≠‡∏î‡∏ú‡πâ‡∏≤‡∏õ‡πà‡∏≤
const SCHOOL_SHEET = '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤!B:D';   // ‡∏ä‡∏µ‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤

// ‚è±Ô∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤ (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
const UPDATE_INTERVAL = 10 * 60;     // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
const MARQUEE_DURATION = 180;        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° 3 ‡∏ô‡∏≤‡∏ó‡∏µ (180 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
const RETRY_ATTEMPTS = 3;            // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
const RETRY_DELAY = 5000;            // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

// ========================================
// üíª ‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏Å - ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
// ========================================

// ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const SHEETS_API_URL = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${SUMMARY_SHEET}?key=${API_KEY}`;
const BANK_API_URL = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${encodeURIComponent(BANK_SHEET)}?key=${API_KEY}`;
const SCHOOL_API_URL = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${encodeURIComponent(SCHOOL_SHEET)}?key=${API_KEY}`;

// ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á
let connectionStatus = 'connecting';
let lastSuccessfulUpdate = null;
let retryCount = 0;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage
function saveDataToCache(key, data) {
  try {
    localStorage.setItem(`kathin_${key}`, JSON.stringify({
      data: data,
      timestamp: Date.now()
    }));
  } catch (error) {
    console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏î‡πâ:', error);
  }
}

function loadDataFromCache(key, maxAge = 24 * 60 * 60 * 1000) { // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  try {
    const cached = localStorage.getItem(`kathin_${key}`);
    if (!cached) return null;
    
    const parsed = JSON.parse(cached);
    if (Date.now() - parsed.timestamp > maxAge) {
      localStorage.removeItem(`kathin_${key}`);
      return null;
    }
    
    return parsed.data;
  } catch (error) {
    console.warn('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏Ñ‡∏ä‡πÑ‡∏î‡πâ:', error);
    return null;
  }
}

function parseAmount(amountText) {
  if (!amountText) return 0;
  const cleaned = amountText.toString().replace(/[‡∏ø,\s]/g, '');
  if (cleaned === '-' || isNaN(cleaned)) return 0;
  return parseFloat(cleaned) || 0;
}

async function fetchDataFromGoogleSheets(attempt = 1) {
  try {
    updateSystemStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');
    
    const response = await fetch(SHEETS_API_URL);
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    const data = await response.json();
    
    if (data.values && data.values.length > 0) {
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÅ‡∏Ñ‡∏ä
      saveDataToCache('summary_data', data.values);
      
      updateAmounts(data.values);
      updateLastUpdateTime();
      connectionStatus = 'connected';
      retryCount = 0;
      lastSuccessfulUpdate = Date.now();
      updateSystemStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  } catch (error) {
    console.error('Error fetching data:', error);
    
    if (attempt < RETRY_ATTEMPTS) {
      updateSystemStatus(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${attempt}/${RETRY_ATTEMPTS}...`);
      setTimeout(() => {
        fetchDataFromGoogleSheets(attempt + 1);
      }, RETRY_DELAY);
      return;
    }
    
    // ‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏Ñ‡∏ä
    const cachedData = loadDataFromCache('summary_data');
    if (cachedData) {
      updateAmounts(cachedData);
      updateSystemStatus('‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á (‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå)');
      connectionStatus = 'offline';
    } else {
      updateSystemStatus('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
      connectionStatus = 'error';
    }
    
    retryCount++;
  }
}

function updateAmounts(data) {
  let donationAmount = 0;
  let amuletAmount = 0;
  let totalAmount = 0;

  for (let j = 0; j < data[3].length; j++) {
    if (data[3][j] && data[3][j].includes("‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ")) {
      donationAmount = parseAmount(data[4][j]);
    }
    if (data[3][j] && data[3][j].includes("‡∏™‡∏±‡πà‡∏á‡∏à‡∏≠‡∏á‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")) {
      amuletAmount = parseAmount(data[4][j]);
    }
  }

  for (let j = 0; j < data[3].length; j++) {
    if (data[3][j] && data[3][j].includes("‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")) {
      if (data[3][j - 1]) totalAmount = parseAmount(data[3][j - 1]);
      else if (data[3][j + 1]) totalAmount = parseAmount(data[3][j + 1]);
    }
  }

  if (totalAmount === 0) {
    for (let j = 0; j < data[1].length; j++) {
      if (data[1][j] && data[1][j].includes("‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")) {
        if (data[1][j - 1]) totalAmount = parseAmount(data[1][j - 1]);
        else if (data[1][j + 1]) totalAmount = parseAmount(data[1][j + 1]);
      }
    }
  }

  if (totalAmount === 0) {
    totalAmount = donationAmount + amuletAmount;
  }

  // Remove loading class and update values
  document.getElementById('donation-amount').classList.remove('loading');
  document.getElementById('amulet-amount').classList.remove('loading');
  document.getElementById('total-amount').classList.remove('loading');

  document.getElementById('donation-amount').textContent = `${donationAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
  document.getElementById('amulet-amount').textContent = `${amuletAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
  document.getElementById('total-amount').textContent = `${totalAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
}

function updateLastUpdateTime() {
  const now = new Date();
  const timeString = now.toLocaleTimeString('th-TH', {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
  document.getElementById('last-update').textContent = timeString;
}

function updateSystemStatus(message) {
  const indicator = document.getElementById('loading-indicator');
  const statusIcon = connectionStatus === 'connected' ? '‚úÖ' : 
                    connectionStatus === 'offline' ? 'üì¥' : 
                    connectionStatus === 'error' ? '‚ùå' : 'üîÑ';
  
  indicator.innerHTML = `<span>${statusIcon} ${message}</span>`;
}

let marqueeGroups = [];
let currentGroupIndex = 0;

async function fetchAllMarqueeGroups(attempt = 1) {
  try {
    const [bankRes, schoolRes] = await Promise.all([
      fetch(BANK_API_URL),
      fetch(SCHOOL_API_URL)
    ]);
    
    if (!bankRes.ok || !schoolRes.ok) {
      throw new Error(`HTTP error! Bank: ${bankRes.status}, School: ${schoolRes.status}`);
    }
    
    const bankData = await bankRes.json();
    const schoolData = await schoolRes.json();

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÅ‡∏Ñ‡∏ä
    saveDataToCache('bank_data', bankData);
    saveDataToCache('school_data', schoolData);

    processMarqueeData(bankData, schoolData);
  } catch (error) {
    console.error('Error fetching marquee data:', error);
    
    if (attempt < RETRY_ATTEMPTS) {
      setTimeout(() => {
        fetchAllMarqueeGroups(attempt + 1);
      }, RETRY_DELAY);
      return;
    }
    
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏Ñ‡∏ä
    const cachedBankData = loadDataFromCache('bank_data');
    const cachedSchoolData = loadDataFromCache('school_data');
    
    if (cachedBankData || cachedSchoolData) {
      processMarqueeData(cachedBankData || {}, cachedSchoolData || {});
    } else {
      document.querySelector('.marquee').innerHTML = '<div style="color:#ff6b6b;">‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ</div>';
    }
  }
}

function processMarqueeData(bankData, schoolData) {
  marqueeGroups = [];

  // --- ‡πÇ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏≠‡∏î‡∏ú‡πâ‡∏≤‡∏õ‡πà‡∏≤‡∏Ø (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô) ---
  if (bankData.values && bankData.values.length > 1) {
    let startIdx = 0;
    if (bankData.values[0][1] && bankData.values[0][1].includes("‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à")) startIdx = 1;
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
    const rows = bankData.values.slice(startIdx).filter(row => row[0] && row[2]);
    rows.sort((a, b) => parseFloat(b[2]) - parseFloat(a[2]));
    let html = `<div class="category-header">üè¶ ‡πÇ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏≠‡∏î‡∏ú‡πâ‡∏≤‡∏õ‡πà‡∏≤‡∏Ø</div>`;
    for (const row of rows) {
      html += `<div class="donor-item">
        <span class="donor-name">${row[0]}</span>
        <span class="donor-amount">${parseInt(row[2]).toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
      </div>`;
    }
    marqueeGroups.push(html);
  }

  // --- ‡πÇ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ---
  if (schoolData.values && schoolData.values.length > 1) {
    let startIdx = 0;
    if (schoolData.values[0][1] && schoolData.values[0][1].includes("‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à")) startIdx = 1;
    const rows = schoolData.values.slice(startIdx).filter(row => row[0] && row[2]);
    rows.sort((a, b) => parseFloat(b[2]) - parseFloat(a[2]));
    let html = `<div class="category-header">üéì ‡πÇ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤</div>`;
    for (const row of rows) {
      html += `<div class="donor-item">
        <span class="donor-name">${row[0]}</span>
        <span class="donor-amount">${parseInt(row[2]).toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
      </div>`;
    }
    marqueeGroups.push(html);
  }

  currentGroupIndex = 0;
  showCurrentMarqueeGroup();
}

function showCurrentMarqueeGroup() {
  const marquee = document.querySelector('.marquee');
  if (!marqueeGroups.length) {
    marquee.innerHTML = '<div style="color:#ff6b6b;">‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•</div>';
    return;
  }
  marquee.innerHTML = marqueeGroups[currentGroupIndex];

  marquee.style.animation = 'none';
  void marquee.offsetWidth;
  marquee.style.animation = null;

  setTimeout(() => {
    currentGroupIndex = (currentGroupIndex + 1) % marqueeGroups.length;
    showCurrentMarqueeGroup();
  }, MARQUEE_DURATION * 1000);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
function exportBackupData() {
  const backupData = {
    timestamp: new Date().toISOString(),
    summary: loadDataFromCache('summary_data'),
    bank: loadDataFromCache('bank_data'),
    school: loadDataFromCache('school_data'),
    settings: {
      spreadsheetId: SPREADSHEET_ID,
      updateInterval: UPDATE_INTERVAL,
      marqueeDuration: MARQUEE_DURATION
    }
  };
  
  const dataStr = JSON.stringify(backupData, null, 2);
  const dataBlob = new Blob([dataStr], {type: 'application/json'});
  const url = URL.createObjectURL(dataBlob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `kathin-backup-${new Date().toISOString().split('T')[0]}.json`;
  link.click();
  URL.revokeObjectURL(url);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á
function importBackupData(event) {
  const file = event.target.files[0];
  if (!file) return;
  
  const reader = new FileReader();
  reader.onload = function(e) {
    try {
      const backupData = JSON.parse(e.target.result);
      
      if (backupData.summary) {
        saveDataToCache('summary_data', backupData.summary);
        updateAmounts(backupData.summary);
      }
      
      if (backupData.bank || backupData.school) {
        saveDataToCache('bank_data', backupData.bank || {});
        saveDataToCache('school_data', backupData.school || {});
        processMarqueeData(backupData.bank || {}, backupData.school || {});
      }
      
      updateSystemStatus('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      updateLastUpdateTime();
    } catch (error) {
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏î‡πâ: ' + error.message);
    }
  };
  reader.readAsText(file);
}

function init() {
  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏Ñ‡∏ä‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  const cachedSummary = loadDataFromCache('summary_data');
  if (cachedSummary) {
    updateAmounts(cachedSummary);
    updateSystemStatus('‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á');
  }
  
  const cachedBank = loadDataFromCache('bank_data');
  const cachedSchool = loadDataFromCache('school_data');
  if (cachedBank || cachedSchool) {
    processMarqueeData(cachedBank || {}, cachedSchool || {});
  }
  
  // ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
  fetchDataFromGoogleSheets();
  fetchAllMarqueeGroups();
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ interval ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  setInterval(fetchDataFromGoogleSheets, UPDATE_INTERVAL * 1000);
  setInterval(fetchAllMarqueeGroups, UPDATE_INTERVAL * 1000);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  addManagementButtons();
}

function addManagementButtons() {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö
  const controlPanel = document.createElement('div');
  controlPanel.style.cssText = `
    position: fixed;
    bottom: 10px;
    right: 10px;
    z-index: 9999;
    display: flex;
    gap: 5px;
    opacity: 0.7;
    transition: opacity 0.3s;
  `;
  
  controlPanel.onmouseenter = () => controlPanel.style.opacity = '1';
  controlPanel.onmouseleave = () => controlPanel.style.opacity = '0.7';
  
  // ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const saveBtn = document.createElement('button');
  saveBtn.innerHTML = 'üíæ';
  saveBtn.title = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á';
  saveBtn.onclick = exportBackupData;
  saveBtn.style.cssText = buttonStyle;
  
  // ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const loadBtn = document.createElement('button');
  loadBtn.innerHTML = 'üìÅ';
  loadBtn.title = '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á';
  loadBtn.onclick = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    input.onchange = importBackupData;
    input.click();
  };
  loadBtn.style.cssText = buttonStyle;
  
  // ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
  const refreshBtn = document.createElement('button');
  refreshBtn.innerHTML = 'üîÑ';
  refreshBtn.title = '‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
  refreshBtn.onclick = () => {
    fetchDataFromGoogleSheets();
    fetchAllMarqueeGroups();
  };
  refreshBtn.style.cssText = buttonStyle;
  
  controlPanel.appendChild(saveBtn);
  controlPanel.appendChild(loadBtn);
  controlPanel.appendChild(refreshBtn);
  document.body.appendChild(controlPanel);
}

const buttonStyle = `
  background: rgba(0,0,0,0.7);
  border: none;
  color: white;
  padding: 8px 10px;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
`;

document.addEventListener('DOMContentLoaded', init);
window.manualUpdate = fetchDataFromGoogleSheets;
window.exportBackup = exportBackupData;